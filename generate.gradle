//Sample tasks used by reactor.

//A lite core
def coreScope = ['amb',
				 'concatarray',
				 /*'flatmap' ,*/
				 'empty',
				 'iterable',
				 'just',
				 'lift',
				 'map',
				 'never',
				 'resume',
				 'zip'];

def excludedScope = ['generate', 'completablefuture'];

def reactorCore = ['api'                      : 'reactor.Composable',
				   'api-package'              : 'reactor.core.publisher',
				   'include'                  : coreScope,
				   'fn-backport'              : 'reactor.fn',
				   'SubscriptionHelper'       : 'reactor.core.support.BackpressureUtils',
				   'BackpressureHelper'       : 'reactor.core.support.BackpressureUtils',
				   'SubscriberBarrier'        : 'reactor.core.subscriber.SubscriberBarrier',
				   'SubscriberWithDemand'     : 'reactor.core.subscriber.SubscriberWithDemand',
				   'SubscriberWithMultiDemand': 'reactor.core.subscriber.SubscriberWithMultiDemand',
				   'SubscriberScalar'         : 'reactor.core.subscriber.SubscriberScalar',
				   'SubscriberScalarDelayed'  : 'reactor.core.subscriber.SubscriberScalarDelayed',
				   'TestProcessor'            : 'reactor.core.processor.EmitterProcessor'

]

//A complete RS commons coverage minus the lite core
def reactorStream = ['api'                      : 'reactor.rx.Stream',
					 'api-package'              : 'reactor.rx.stream',
					 'exclude'                  : coreScope + excludedScope,
					 'fn-backport'              : 'reactor.fn',
					 'SubscriptionHelper'       : 'reactor.core.support.BackpressureUtils',
					 'BackpressureHelper'       : 'reactor.core.support.BackpressureUtils',
					 'SubscriberBarrier'        : 'reactor.core.subscriber.SubscriberBarrier',
					 'SubscriberWithDemand'     : 'reactor.core.subscriber.SubscriberWithDemand',
					 'SubscriberWithMultiDemand': 'reactor.core.subscriber.SubscriberWithMultiDemand',
					 'SubscriberScalar'         : 'reactor.core.subscriber.SubscriberScalar',
					 'SubscriberScalarDelayed'  : 'reactor.core.subscriber.SubscriberScalarDelayed',
					 'TestProcessor'            : 'reactor.core.processor.EmitterProcessor']

def defaultTarget = reactorStream


task generateTargetAPI(type: Sync) {
  description = 'Deploy Reactive Streams Commons source code to the target API, effectively generating source code in' +
		  ' target directory.'

  outputs.upToDateWhen { false }

  def target = defaultTarget

  def apiClass = target['api']
  def splitted = apiClass.split('\\.')
  def apiClassName = splitted[splitted.length - 1]

  from 'src/main/java/reactivestreams/commons'
  into 'build/generated_api'

  if (target.include) {
	include { details ->
	  !details.file.name
			  .startsWith('Publisher') || details.file.name
			  .replaceFirst('Publisher', '')
			  .replaceAll(".java", '')
			  .toLowerCase() in target.include
	}
  }
  else if (target.exclude) {
	exclude { details ->
	  details.file.name
			  .startsWith('Publisher') && details.file.name
			  .replaceFirst('Publisher', '')
			  .replaceAll(".java", '')
			  .toLowerCase() in target.exclude
	}
  }

  if (target.TestProcessor) {
	exclude '**/TestProcessor.java'
  }

  rename { String fileName -> fileName.replace('Publisher', apiClassName)
  }

  filter { String line ->

	if (line.trim().startsWith('package')) {
	  if (target['api-package']) {
		return line.replace('reactivestreams.commons', target['api-package'])
	  }
	  else {
		return line
	  }
	}

	if (line.trim().startsWith('import')) {
	  def l = line
	  if (target.TestProcessor) {
		l = l.replace("reactivestreams.commons.internal.TestProcessor", target.TestProcessor)
	  }

	  if (target['api-package']) {
		return line.replace('reactivestreams.commons', target['api-package'])
	  }
	  else {
		return line
	  }
	}

	def l = line.replace("implements Publisher", "extends $apiClass")
			.replace('public final class Publisher', "public final class $apiClassName")
			.replace('public Publisher', "public $apiClassName")
			.replace('java.util.function', "reactor.fn")

	if (target.TestProcessor) {
	  l = l.replace('TestProcessor', target.TestProcessor)
	}

	return l
  }

}
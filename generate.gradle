//Sample tasks used by reactor.

//A lite core
def includingCoreScope = ['amb',
                          'array' ,
                          /*'concatarray' ,*/ //managed by reactor-core
                          /*'concatiterable' ,*/ //managed by reactor-core
                          'empty',
                          /*'flatmap' ,*/ //managed by reactor-core
                          'iterable',
                          'just',
                          /*'lift',*/ //managed by reactor-core
                          'map',
                          'never',
                          'peek',
                          'resume',
                          /*'zip'*/] //managed by reactor-core

//A complete RS commons coverage minus the lite core
def excludingStreamScope = includingCoreScope + ['generate',
                                                 'completablefuture',
                                                 'concatarray',
                                                 'concatiterable',
                                                 'flatmap' ,
                                                 'lift' , //Already managed by reactor-stream
                                                 'stream',
                                                 'zip']

//Common reactor helper references
def reactorCommon = ['fn-backport'              : 'reactor.fn',
                     'single-type'              : 'reactor.Mono',
                     'test-type'              	: false,
                     'header'              		: '@since 2.5',
                     'SubscriptionHelper'       : 'BackpressureUtils',
                     'BackpressureHelper'       : 'BackpressureUtils',
                     //'SubscriberDeferSubscription'     : 'reactor.core.subscriber.SubscriberDeferSubscription',
                     //'SubscriberMultiSubscription': 'reactor.core.subscriber.SubscriberMultiSubscription',
                     //'ScalarSubscription'         : 'reactor.core.subscription.SubscriberScalar',
                     //'SubscriberDeferScalar'  : 'reactor.core.subscriber.SubscriberScalarDelayed',
                     'SimpleProcessor'          : 'reactor.core.processor.EmitterProcessor']

//Reactor Core configuration
def reactorCore = ['api'             : 'reactor.Flux',
                   'api-package'     : 'reactor.core.publisher',
                   'extra-packages': 'reactor.core',
                   'include'         : includingCoreScope] + reactorCommon

//Reactor Stream configuration
def reactorStream = ['api'        : 'reactor.rx.Stream',
                     'api-package': 'reactor.rx.stream',
                     'exclude'    : excludingStreamScope,
                     'internal'   : false] + reactorCommon

def defaultTarget = reactorCore

// ------------------------------------------
// Generation Script
// ------------------------------------------

task generateTargetAPI(type: Sync) {
	description = 'Deploy Reactive Streams Commons source code to the target API, effectively generating source code in' +
			' target directory.'


	outputs.upToDateWhen { false }

	def target = defaultTarget
	def license = "\n/**\n * {@see https://github.com/reactor/reactive-streams-commons}\n * $target.header\n */"

	def apiClass = target['api']
	def splitted = apiClass.split('\\.')
	def apiClassName = splitted[splitted.length - 1]

	from 'src/main/java/reactivestreams/commons'
	into 'build/generated_api'

	if (target.include) {
		include { details ->
			!details.file.name
					.startsWith('Publisher') || details.file.name
					.replaceFirst('Publisher', '')
					.replaceAll(".java", '')
					.toLowerCase() in target.include
		}
	} else if (target.exclude) {
		exclude { details ->
			details.file.name
					.startsWith('Publisher') && details.file.name
					.replaceFirst('Publisher', '')
					.replaceAll(".java", '')
					.toLowerCase() in target.exclude
		}
	}

	if (target.containsKey('internal') && !target.internal) {
		exclude '**/subscriber/**'
		exclude '**/subscription/**'
		exclude '**/support/**'
	}
	else if (target.containsKey('test-type') && !target['test-type']){
	  exclude '**/subscriber/test/**'
	}

	if (target.SimpleProcessor) {
		//exclude '**/SimpleProcessor.java'
		exclude '**/processor/**'
	}

	rename { String fileName -> fileName.replace('Publisher', apiClassName)
	}

	filter { String line ->

		if (line.trim().startsWith('package')) {
			if (target['extra-packages'] && !line.contains("publisher")) {
				return line.replace('reactivestreams.commons', target['extra-packages'])
			} else if (target['api-package']) {
				return line.replace('reactivestreams.commons.publisher', target['api-package'])
			} else {
				return line
			}
		}

		if (line.trim().startsWith('import')) {
			def l = line
			if (target.SimpleProcessor) {
				l = l.replace("reactivestreams.commons.processor.SimpleProcessor", target.SimpleProcessor)
			}

			if (target['fn-backport']) {
				l = l.replace('java.util.function', target['fn-backport'])
			}

			if (target['api-package']) {
			  l = l.replace('reactivestreams.commons.publisher', target['api-package'])
			}

			if (target['extra-packages']) {
			  l = l.replace('reactivestreams.commons', target['extra-packages'])
			}

			if (l.contains('BackpressureHelper') && target['BackpressureHelper']){
			  l = l.replace('BackpressureHelper', target['BackpressureHelper'])
			}
			else if (l.contains('SubscriptionHelper') && target['SubscriptionHelper']){
			  l = l.replace('SubscriptionHelper', target['SubscriptionHelper'])
			}

		  return l;
		}

		def l = line.replace("implements Publisher", "extends $apiClass")
				.replace('public final class Publisher', "$license\npublic final class $apiClassName")

		if(!l.contains('Subscription')) {
		  l = l.replace('public Publisher', "public $apiClassName")
		}

		//Special case for just
		if (l.contains('implements Supplier<T>, Publisher<T>')) {
			return l.replace(', Publisher<T>', '').replace('Just<T>', "Just<T> extends $apiClassName<T>")
		}

		if (l.contains('BackpressureHelper') && target['BackpressureHelper']){
		  l = l.replace('BackpressureHelper', target['BackpressureHelper'])
		}
		else if (l.contains('SubscriptionHelper') && target['SubscriptionHelper']){
		  l = l.replace('SubscriptionHelper', target['SubscriptionHelper'])
		}

	  if (target.SimpleProcessor) {
			l = l.replace('SimpleProcessor', target.SimpleProcessor)
		}

		return l
	}

}